import pytest
import os
import tempfile
import shutil
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager

@pytest.fixture
def browser(request):
    options = Options()
    options.add_argument("--headless=new")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")

    # üîë –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
    profile_dir = tempfile.mkdtemp(prefix="selenium-profile-")
    options.add_argument(f"--user-data-dir={profile_dir}")

    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    driver.maximize_window()

    yield driver

    # –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞
    if request.node.rep_call.failed:
        screenshot_dir = "screenshots"
        os.makedirs(screenshot_dir, exist_ok=True)
        file_name = f"{request.node.nodeid.replace('::', '_')}.png"
        screenshot_path = os.path.join(screenshot_dir, file_name)
        driver.save_screenshot(screenshot_path)
        print(f"\nüì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {screenshot_path}")

    driver.quit()

    # üßπ –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    shutil.rmtree(profile_dir, ignore_errors=True)

@pytest.hookimpl(hookwrapper=True)
def pytest_runtest_makereport(item, call):
    # –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–ø–∞–ª –ª–∏ —Ç–µ—Å—Ç
    outcome = yield
    rep = outcome.get_result()
    setattr(item, "rep_" + rep.when, rep)
